import type {
  Extension,
  Element,
  Coding,
  Address,
  Age,
  Annotation,
  Attachment,
  CodeableConcept,
  ContactPoint,
  Count,
  Distance,
  Duration,
  HumanName,
  Identifier,
  Money,
  Period,
  Quantity,
  Range,
  Ratio,
  Reference,
  SampledData,
  Signature,
  Timing,
  ContactDetail,
  Contributor,
  DataRequirement,
  Expression,
  ParameterDefinition,
  RelatedArtifact,
  TriggerDefinition,
  UsageContext,
  Dosage,
  Meta,
} from "../core/types";
import type { ElementDefinitionSlicing } from "../elementdefinitionslicing/types";
import type { ElementDefinitionBase } from "../elementdefinitionbase/types";
import type { ElementDefinitionType } from "../elementdefinitiontype/types";
import type { ElementDefinitionExample } from "../elementdefinitionexample/types";
import type { ElementDefinitionConstraint } from "../elementdefinitionconstraint/types";
import type { ElementDefinitionBinding } from "../elementdefinitionbinding/types";
import type { ElementDefinitionMapping } from "../elementdefinitionmapping/types";

/** Generated from FHIR JSON Schema */

/** Captures constraints on each element within the resource, profile, or extension. */
export interface ElementDefinition {
  id?: string;

  extension?: Extension[];

  modifierExtension?: Extension[];
  /** The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource or extension. */
  path: string;

  _path?: Element;
  /** Codes that define how this element is represented in instances, when the deviation varies from the normal case. */
  representation?: ("xmlAttr" | "xmlText" | "typeAttr" | "cdaText" | "xhtml")[];

  _representation?: Element[];
  /** The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element. */
  sliceName?: string;

  _sliceName?: Element;
  /** If true, indicates that this slice definition is constraining a slice definition with the same name in an inherited profile. If false, the slice is not overriding any slice in an inherited profile. If missing, the slice might or might not be overriding a slice in an inherited profile, depending on the sliceName. */
  sliceIsConstraining?: boolean;

  _sliceIsConstraining?: Element;
  /** A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form. */
  label?: string;

  _label?: Element;
  /** A code that has the same meaning as the element in a particular terminology. */
  code?: Coding[];

  slicing?: ElementDefinitionSlicing;
  /** A concise description of what this element means (e.g. for use in autogenerated summaries). */
  short?: string;

  _short?: Element;
  /** Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource. (Note: The text you are reading is specified in ElementDefinition.definition). */
  definition?: string;

  _definition?: Element;
  /** Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc. (Note: The text you are reading is specified in ElementDefinition.comment). */
  comment?: string;

  _comment?: Element;
  /** This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element. */
  requirements?: string;

  _requirements?: Element;
  /** Identifies additional names by which this element might also be known. */
  alias?: string[];

  _alias?: Element[];
  /** The minimum number of times this element SHALL appear in the instance. */
  min?: number;

  _min?: Element;
  /** The maximum number of times this element is permitted to appear in the instance. */
  max?: string;

  _max?: Element;

  base?: ElementDefinitionBase;
  /** Identifies an element defined elsewhere in the definition whose content rules should be applied to the current element. ContentReferences bring across all the rules that are in the ElementDefinition for the element, including definitions, cardinality constraints, bindings, invariants etc. */
  contentReference?: string;

  _contentReference?: Element;

  type?: ElementDefinitionType[];

  defaultValueBase64Binary?: string;

  _defaultValueBase64Binary?: Element;

  defaultValueBoolean?: boolean;

  _defaultValueBoolean?: Element;

  defaultValueCanonical?: string;

  _defaultValueCanonical?: Element;

  defaultValueCode?: string;

  _defaultValueCode?: Element;

  defaultValueDate?: string;

  _defaultValueDate?: Element;

  defaultValueDateTime?: string;

  _defaultValueDateTime?: Element;

  defaultValueDecimal?: number;

  _defaultValueDecimal?: Element;

  defaultValueId?: string;

  _defaultValueId?: Element;

  defaultValueInstant?: string;

  _defaultValueInstant?: Element;

  defaultValueInteger?: number;

  _defaultValueInteger?: Element;

  defaultValueMarkdown?: string;

  _defaultValueMarkdown?: Element;

  defaultValueOid?: string;

  _defaultValueOid?: Element;

  defaultValuePositiveInt?: number;

  _defaultValuePositiveInt?: Element;

  defaultValueString?: string;

  _defaultValueString?: Element;

  defaultValueTime?: string;

  _defaultValueTime?: Element;

  defaultValueUnsignedInt?: number;

  _defaultValueUnsignedInt?: Element;

  defaultValueUri?: string;

  _defaultValueUri?: Element;

  defaultValueUrl?: string;

  _defaultValueUrl?: Element;

  defaultValueUuid?: string;

  _defaultValueUuid?: Element;

  defaultValueAddress?: Address;

  defaultValueAge?: Age;

  defaultValueAnnotation?: Annotation;

  defaultValueAttachment?: Attachment;

  defaultValueCodeableConcept?: CodeableConcept;

  defaultValueCoding?: Coding;

  defaultValueContactPoint?: ContactPoint;

  defaultValueCount?: Count;

  defaultValueDistance?: Distance;

  defaultValueDuration?: Duration;

  defaultValueHumanName?: HumanName;

  defaultValueIdentifier?: Identifier;

  defaultValueMoney?: Money;

  defaultValuePeriod?: Period;

  defaultValueQuantity?: Quantity;

  defaultValueRange?: Range;

  defaultValueRatio?: Ratio;

  defaultValueReference?: Reference;

  defaultValueSampledData?: SampledData;

  defaultValueSignature?: Signature;

  defaultValueTiming?: Timing;

  defaultValueContactDetail?: ContactDetail;

  defaultValueContributor?: Contributor;

  defaultValueDataRequirement?: DataRequirement;

  defaultValueExpression?: Expression;

  defaultValueParameterDefinition?: ParameterDefinition;

  defaultValueRelatedArtifact?: RelatedArtifact;

  defaultValueTriggerDefinition?: TriggerDefinition;

  defaultValueUsageContext?: UsageContext;

  defaultValueDosage?: Dosage;

  defaultValueMeta?: Meta;
  /** The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing'). */
  meaningWhenMissing?: string;

  _meaningWhenMissing?: Element;
  /** If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning. */
  orderMeaning?: string;

  _orderMeaning?: Element;

  fixedBase64Binary?: string;

  _fixedBase64Binary?: Element;

  fixedBoolean?: boolean;

  _fixedBoolean?: Element;

  fixedCanonical?: string;

  _fixedCanonical?: Element;

  fixedCode?: string;

  _fixedCode?: Element;

  fixedDate?: string;

  _fixedDate?: Element;

  fixedDateTime?: string;

  _fixedDateTime?: Element;

  fixedDecimal?: number;

  _fixedDecimal?: Element;

  fixedId?: string;

  _fixedId?: Element;

  fixedInstant?: string;

  _fixedInstant?: Element;

  fixedInteger?: number;

  _fixedInteger?: Element;

  fixedMarkdown?: string;

  _fixedMarkdown?: Element;

  fixedOid?: string;

  _fixedOid?: Element;

  fixedPositiveInt?: number;

  _fixedPositiveInt?: Element;

  fixedString?: string;

  _fixedString?: Element;

  fixedTime?: string;

  _fixedTime?: Element;

  fixedUnsignedInt?: number;

  _fixedUnsignedInt?: Element;

  fixedUri?: string;

  _fixedUri?: Element;

  fixedUrl?: string;

  _fixedUrl?: Element;

  fixedUuid?: string;

  _fixedUuid?: Element;

  fixedAddress?: Address;

  fixedAge?: Age;

  fixedAnnotation?: Annotation;

  fixedAttachment?: Attachment;

  fixedCodeableConcept?: CodeableConcept;

  fixedCoding?: Coding;

  fixedContactPoint?: ContactPoint;

  fixedCount?: Count;

  fixedDistance?: Distance;

  fixedDuration?: Duration;

  fixedHumanName?: HumanName;

  fixedIdentifier?: Identifier;

  fixedMoney?: Money;

  fixedPeriod?: Period;

  fixedQuantity?: Quantity;

  fixedRange?: Range;

  fixedRatio?: Ratio;

  fixedReference?: Reference;

  fixedSampledData?: SampledData;

  fixedSignature?: Signature;

  fixedTiming?: Timing;

  fixedContactDetail?: ContactDetail;

  fixedContributor?: Contributor;

  fixedDataRequirement?: DataRequirement;

  fixedExpression?: Expression;

  fixedParameterDefinition?: ParameterDefinition;

  fixedRelatedArtifact?: RelatedArtifact;

  fixedTriggerDefinition?: TriggerDefinition;

  fixedUsageContext?: UsageContext;

  fixedDosage?: Dosage;

  fixedMeta?: Meta;

  patternBase64Binary?: string;

  _patternBase64Binary?: Element;

  patternBoolean?: boolean;

  _patternBoolean?: Element;

  patternCanonical?: string;

  _patternCanonical?: Element;

  patternCode?: string;

  _patternCode?: Element;

  patternDate?: string;

  _patternDate?: Element;

  patternDateTime?: string;

  _patternDateTime?: Element;

  patternDecimal?: number;

  _patternDecimal?: Element;

  patternId?: string;

  _patternId?: Element;

  patternInstant?: string;

  _patternInstant?: Element;

  patternInteger?: number;

  _patternInteger?: Element;

  patternMarkdown?: string;

  _patternMarkdown?: Element;

  patternOid?: string;

  _patternOid?: Element;

  patternPositiveInt?: number;

  _patternPositiveInt?: Element;

  patternString?: string;

  _patternString?: Element;

  patternTime?: string;

  _patternTime?: Element;

  patternUnsignedInt?: number;

  _patternUnsignedInt?: Element;

  patternUri?: string;

  _patternUri?: Element;

  patternUrl?: string;

  _patternUrl?: Element;

  patternUuid?: string;

  _patternUuid?: Element;

  patternAddress?: Address;

  patternAge?: Age;

  patternAnnotation?: Annotation;

  patternAttachment?: Attachment;

  patternCodeableConcept?: CodeableConcept;

  patternCoding?: Coding;

  patternContactPoint?: ContactPoint;

  patternCount?: Count;

  patternDistance?: Distance;

  patternDuration?: Duration;

  patternHumanName?: HumanName;

  patternIdentifier?: Identifier;

  patternMoney?: Money;

  patternPeriod?: Period;

  patternQuantity?: Quantity;

  patternRange?: Range;

  patternRatio?: Ratio;

  patternReference?: Reference;

  patternSampledData?: SampledData;

  patternSignature?: Signature;

  patternTiming?: Timing;

  patternContactDetail?: ContactDetail;

  patternContributor?: Contributor;

  patternDataRequirement?: DataRequirement;

  patternExpression?: Expression;

  patternParameterDefinition?: ParameterDefinition;

  patternRelatedArtifact?: RelatedArtifact;

  patternTriggerDefinition?: TriggerDefinition;

  patternUsageContext?: UsageContext;

  patternDosage?: Dosage;

  patternMeta?: Meta;

  example?: ElementDefinitionExample[];

  minValueDate?: string;

  _minValueDate?: Element;

  minValueDateTime?: string;

  _minValueDateTime?: Element;

  minValueInstant?: string;

  _minValueInstant?: Element;

  minValueTime?: string;

  _minValueTime?: Element;

  minValueDecimal?: number;

  _minValueDecimal?: Element;

  minValueInteger?: number;

  _minValueInteger?: Element;

  minValuePositiveInt?: number;

  _minValuePositiveInt?: Element;

  minValueUnsignedInt?: number;

  _minValueUnsignedInt?: Element;

  minValueQuantity?: Quantity;

  maxValueDate?: string;

  _maxValueDate?: Element;

  maxValueDateTime?: string;

  _maxValueDateTime?: Element;

  maxValueInstant?: string;

  _maxValueInstant?: Element;

  maxValueTime?: string;

  _maxValueTime?: Element;

  maxValueDecimal?: number;

  _maxValueDecimal?: Element;

  maxValueInteger?: number;

  _maxValueInteger?: Element;

  maxValuePositiveInt?: number;

  _maxValuePositiveInt?: Element;

  maxValueUnsignedInt?: number;

  _maxValueUnsignedInt?: Element;

  maxValueQuantity?: Quantity;
  /** Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element. */
  maxLength?: number;

  _maxLength?: Element;
  /** A reference to an invariant that may make additional statements about the cardinality or value in the instance. */
  condition?: string[];

  _condition?: Element[];

  constraint?: ElementDefinitionConstraint[];
  /** If true, implementations that produce or consume resources SHALL provide "support" for the element in some meaningful way.  If false, the element may be ignored and not supported. If false, whether to populate or use the data element in any way is at the discretion of the implementation. */
  mustSupport?: boolean;

  _mustSupport?: Element;
  /** If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system. */
  isModifier?: boolean;

  _isModifier?: Element;
  /** Explains how that element affects the interpretation of the resource or element that contains it. */
  isModifierReason?: string;

  _isModifierReason?: Element;
  /** Whether the element should be included if a client requests a search with the parameter _summary=true. */
  isSummary?: boolean;

  _isSummary?: Element;

  binding?: ElementDefinitionBinding;

  mapping?: ElementDefinitionMapping[];
}
